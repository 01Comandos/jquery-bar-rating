{"version":3,"sources":["jquery.barrating.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","BarRating","self","this","wrapElement","classes","options","wrapperClass","theme","push","$elem","wrap","class","join","unwrapElement","unwrap","findInitialOption","option","initialRating","getData","key","data","setData","value","saveDataOnElement","$opt","userOptions","ratingValue","val","ratingText","text","originalRatingValue","originalRatingText","find","removeDataOnElement","removeData","isDeselectable","buildWidget","$w","each","html","$a","$span","href","data-rating-value","data-rating-text","append","showSelectedRating","reverse","addClass","readonly","nextAllorPreviousAll","setSelectFieldValue","prop","change","parent","applyStyle","removeClass","attachClickHandler","$all","on","event","preventDefault","attr","hasClass","onSelect","call","attachMouseEnterHandler","mouseenter","attachMouseLeaveHandler","$widget","mouseleave","fastClicks","stopPropagation","click","disableClicks","show","insertAfter","hoverState","hide","set","clear","onClear","destroy","off","remove","onDestroy","prototype","init","elem","extend","fn","barrating","defaults","method","plugin","is","error","hasOwnProperty","next","showValues"],"mappings":"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","file":"jquery.barrating.min.js","sourcesContent":["/**\n * jQuery Bar Rating Plugin v1.1.2\n *\n * http://github.com/antennaio/jquery-bar-rating\n *\n * Copyright (c) 2012-2015 Kazik Pietruszewski\n *\n * Dual licensed under the MIT and GPL licenses:\n * http://www.opensource.org/licenses/mit-license.php\n * http://www.gnu.org/licenses/gpl.html\n */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n\n    var BarRating = (function() {\n\n        function BarRating() {\n            var self = this;\n\n            // wrap element in a wrapper div\n            var wrapElement = function() {\n                var classes = [self.options.wrapperClass];\n\n                if (self.options.theme !== '') {\n                    classes.push('br-theme-' + self.options.theme);\n                }\n                \n                self.$elem.wrap($('<div />', {\n                    'class': classes.join(' ')\n                }));\n            };\n\n            // unwrap element\n            var unwrapElement = function() {\n                self.$elem.unwrap();\n            };\n\n            // return initial option\n            var findInitialOption = function() {\n                var option;\n\n                if (self.options.initialRating) {\n                    option = $('option[value=\"' + self.options.initialRating  + '\"]', self.$elem);\n                } else {\n                    option = $('option:selected', self.$elem);\n                }\n\n                return option;\n            };\n\n            // get data\n            var getData = function(key) {\n                var data = self.$elem.data('barrating');\n\n                if (typeof key !== 'undefined') {\n                    return data[key];\n                }\n\n                return data;\n            };\n\n            // set data\n            var setData = function(key, value) {\n                if (value !== null && typeof value === 'object') {\n                    self.$elem.data('barrating', value);\n                } else {\n                    self.$elem.data('barrating')[key] = value;\n                }\n            };\n\n            // save data on element\n            var saveDataOnElement = function() {\n                var $opt = findInitialOption();\n\n                setData(null, {\n                    userOptions: self.options,\n\n                    // initial rating based on the OPTION value\n                    ratingValue: $opt.val(),\n                    ratingText: ($opt.data('html')) ? $opt.data('html') : $opt.text(),\n\n                    // rating will be restored by calling clear method\n                    originalRatingValue: $opt.val(),\n                    originalRatingText: ($opt.data('html')) ? $opt.data('html') : $opt.text()\n                });\n\n                // first OPTION empty - allow deselecting of ratings\n                setData('deselectable', (!self.$elem.find('option:first').val()) ? true : false);\n            };\n\n            // remove data on element\n            var removeDataOnElement = function() {\n                self.$elem.removeData('barrating');\n            };\n\n            // return current rating text\n            var ratingText = function() {\n                return getData('ratingText');\n            };\n\n            // return current rating value\n            var ratingValue = function() {\n                return getData('ratingValue');\n            };\n\n            // is the rating deselectable?\n            var isDeselectable = function() {\n                return getData('deselectable');\n            };\n\n            // build widget and return jQuery element\n            var buildWidget = function() {\n                var $w = $('<div />', { 'class': 'br-widget' });\n\n                // create A elements that will replace OPTIONs\n                self.$elem.find('option').each(function() {\n                    var val, text, html, $a, $span;\n\n                    val = $(this).val();\n\n                    // create ratings - but only if val is defined\n                    if (val) {\n                        text = $(this).text();\n                        html = $(this).data('html');\n                        if (html) { text = html; }\n\n                        $a = $('<a />', { 'href': '#', 'data-rating-value': val, 'data-rating-text': text });\n                        $span = $('<span />', { 'html': (self.options.showValues) ? text : '' });\n\n                        $w.append($a.append($span));\n                    }\n\n                });\n\n                // append .br-current-rating div to the widget\n                if (self.options.showSelectedRating) {\n                    $w.append($('<div />', { 'text': '', 'class': 'br-current-rating' }));\n                }\n\n                // additional classes for the widget\n                if (self.options.reverse) {\n                    $w.addClass('br-reverse');\n                }\n\n                if (self.options.readonly) {\n                    $w.addClass('br-readonly');\n                }\n\n                return $w;\n            };\n\n            // return a jQuery function name depending on the 'reverse' setting\n            var nextAllorPreviousAll = function() {\n                if (self.options.reverse) {\n                    return 'nextAll';\n                } else {\n                    return 'prevAll';\n                }\n            };\n\n            // set the value of the select field\n            var setSelectFieldValue = function(value) {\n                // change selected OPTION in the select field (hidden)\n                self.$elem.find('option[value=\"' + value + '\"]').prop('selected', true);\n                self.$elem.change();\n            };\n\n            // display the currently selected rating\n            var showSelectedRating = function(text) {\n                // text undefined?\n                text = text ? text : ratingText();\n\n                // update .br-current-rating div\n                if (self.options.showSelectedRating) {\n                    self.$elem.parent().find('.br-current-rating').text(text);\n                }\n            };\n\n            // apply style by setting classes on elements\n            var applyStyle = function($w) {\n                // remove classes\n                $w.find('a').removeClass('br-selected br-current');\n\n                // add classes\n                $w.find('a[data-rating-value=\"' + ratingValue() + '\"]')\n                    .addClass('br-selected br-current')[nextAllorPreviousAll()]()\n                    .addClass('br-selected');\n            };\n\n            // handle click events\n            var attachClickHandler = function($all) {\n                $all.on('click', function(event) {\n                    var $a = $(this),\n                        value,\n                        text;\n\n                    event.preventDefault();\n\n                    $all.removeClass('br-active br-selected');\n                    $a.addClass('br-selected')[nextAllorPreviousAll()]()\n                        .addClass('br-selected');\n\n                    value = $a.attr('data-rating-value');\n                    text = $a.attr('data-rating-text');\n\n                    // is current and deselectable?\n                    if ($a.hasClass('br-current') && isDeselectable()) {\n                        $a.removeClass('br-selected br-current')[nextAllorPreviousAll()]()\n                            .removeClass('br-selected br-current');\n                        value = ''; text = '';\n                    } else {\n                        $all.removeClass('br-current');\n                        $a.addClass('br-current');\n                    }\n\n                    // remember selected rating\n                    setData('ratingValue', value);\n                    setData('ratingText', text);\n\n                    setSelectFieldValue(value);\n                    showSelectedRating(text);\n\n                    // onSelect callback\n                    self.options.onSelect.call(\n                        this,\n                        ratingValue(),\n                        ratingText()\n                    );\n\n                    return false;\n                });\n            };\n\n            // handle mouseenter events\n            var attachMouseEnterHandler = function($all) {\n                $all.on({\n                    mouseenter: function() {\n                        var $a = $(this);\n\n                        $all.removeClass('br-active br-selected');\n                        $a.addClass('br-active')[nextAllorPreviousAll()]()\n                            .addClass('br-active');\n\n                        showSelectedRating($a.attr('data-rating-text'));\n                    }\n                });\n            };\n\n            // handle mouseleave events\n            var attachMouseLeaveHandler = function($all, $widget) {\n                $widget.on({\n                    mouseleave: function() {\n                        $all.removeClass('br-active');\n                        showSelectedRating();\n                        applyStyle($widget);\n                    }\n                });\n            };\n\n            // somewhat primitive way to remove 300ms click delay on touch devices\n            // for a more advanced solution consider setting `fastClicks` option to false\n            // and using a library such as fastclick (https://github.com/ftlabs/fastclick)\n            var fastClicks = function($all) {\n                $all.on('touchstart', function(event) {\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    $(this).click();\n                });\n            };\n\n            // disable clicks\n            var disableClicks = function($all) {\n                $all.on('click', function(event) {\n                    event.preventDefault();\n                });\n            };\n\n            this.show = function() {\n                var $widget, $all;\n\n                // run only once\n                if (getData()) return;\n\n                // wrap element\n                wrapElement();\n\n                // save data\n                saveDataOnElement();\n\n                // build & append widget to the DOM\n                $widget = buildWidget();\n                $widget.insertAfter(self.$elem);\n                applyStyle($widget);\n\n                showSelectedRating();\n\n                $all = $widget.find('a');\n\n                if (self.options.fastClicks) {\n                    fastClicks($all);\n                }\n\n                if (self.options.readonly) {\n\n                    // do not react to click events if rating is read-only\n                    disableClicks($all);\n\n                } else {\n\n                    // attach click event handler\n                    attachClickHandler($all);\n\n                    if (self.options.hoverState) {\n                        // attach mouseenter event handler\n                        attachMouseEnterHandler($all);\n\n                        // attach mouseleave event handler\n                        attachMouseLeaveHandler($all, $widget);\n                    }\n\n                }\n\n                // hide the select field\n                self.$elem.hide();\n            };\n\n            this.set = function(value) {\n                var options = getData('userOptions');\n\n                if (!this.$elem.find('option[value=\"' + value + '\"]').val()) return;\n\n                // set data\n                setData('ratingValue', value);\n                setData('ratingText', this.$elem.find('option[value=\"' + value + '\"]').text());\n\n                setSelectFieldValue(ratingValue());\n                showSelectedRating(ratingText());\n\n                applyStyle(this.$widget);\n\n                // onSelect callback\n                options.onSelect.call(\n                    this,\n                    ratingValue(),\n                    ratingText()\n                );\n            };\n\n            this.clear = function() {\n                var options = getData('userOptions');\n\n                // restore original data\n                setData('ratingValue', getData('originalRatingValue'));\n                setData('ratingText', getData('originalRatingText'));\n\n                setSelectFieldValue(ratingValue());\n                showSelectedRating(ratingText());\n\n                applyStyle(this.$widget);\n\n                // onClear callback\n                options.onClear.call(\n                    this,\n                    ratingValue(),\n                    ratingText()\n                );\n            };\n\n            this.destroy = function() {\n                var value = ratingValue();\n                var text = ratingText();\n                var options = getData('userOptions');\n\n                this.$widget.off().remove();\n\n                // remove data\n                removeDataOnElement();\n\n                // unwrap the element\n                unwrapElement();\n\n                // show the element\n                this.$elem.show();\n\n                // onDestroy callback\n                options.onDestroy.call(\n                    this,\n                    value,\n                    text\n                );\n            };\n        }\n\n        BarRating.prototype.init = function (options, elem) {\n            this.$elem = $(elem);\n            this.options = $.extend({}, $.fn.barrating.defaults, options);\n\n            return this.options;\n        };\n\n        return BarRating;\n    })();\n\n    $.fn.barrating = function (method, options) {\n        return this.each(function () {\n            var plugin = new BarRating();\n\n            // plugin works with select fields\n            if (!$(this).is('select')) {\n                $.error('Sorry, this plugin only works with select fields.');\n            }\n\n            // method supplied\n            if (plugin.hasOwnProperty(method)) {\n                plugin.init(options, this);\n                if (method === 'show') {\n                    return plugin.show(options);\n                } else {\n                    // plugin exists?\n                    if (plugin.$elem.data('barrating')) {\n                        plugin.$widget = $(this).next('.br-widget');\n                        return plugin[method](options);\n                    }\n                }\n\n            // no method supplied or only options supplied\n            } else if (typeof method === 'object' || !method) {\n                options = method;\n                plugin.init(options, this);\n                return plugin.show();\n\n            } else {\n                $.error('Method ' + method + ' does not exist on jQuery.barrating');\n            }\n        });\n    };\n\n    $.fn.barrating.defaults = {\n        theme:'',\n        initialRating:null, // initial rating\n        showValues:false, // display rating values on the bars?\n        showSelectedRating:true, // append a div with a rating to the widget?\n        reverse:false, // reverse the rating?\n        readonly:false, // make the rating ready-only?\n        fastClicks:true, // remove 300ms click delay on touch devices?\n        hoverState:true, // change state on hover?\n        wrapperClass:'br-wrapper', // class applied to wrapper div\n        onSelect:function (value, text) {\n        }, // callback fired when a rating is selected\n        onClear:function (value, text) {\n        }, // callback fired when a rating is cleared\n        onDestroy:function (value, text) {\n        } // callback fired when a widget is destroyed\n    };\n\n    $.fn.barrating.BarRating = BarRating;\n\n}));\n"],"sourceRoot":"/source/"}